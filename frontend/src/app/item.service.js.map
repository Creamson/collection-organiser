{"version":3,"file":"item.service.js","sourceRoot":"","sources":["item.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, OnInit} from \"@angular/core\";\nimport {Item} from \"./item\";\nimport {Category} from \"./category\";\nimport {AuthHttp, JwtHelper} from \"angular2-jwt\";\nimport {apiPath} from \"../assets/constants\";\nimport \"rxjs/add/operator/first\";\nimport \"rxjs/add/operator/toPromise\";\n\n\n@Injectable()\nexport class ItemService implements OnInit {\n\n  private id_token: string;\n  private decodedJwt: string;\n  private response: string;\n  private url: string = apiPath + 'collections'\n  public requestBody = \"\";\n\n  constructor(public authHttp: AuthHttp) {\n    this.id_token = localStorage.getItem('id_token');\n    this.decodedJwt = new JwtHelper().decodeToken(this.id_token);\n    this.response = 'nothing received yet';\n  }\n\n  getItems(): Promise<Item[]> {\n    // todo\n    var category: Category = new Category(\"Movies\");\n    return this.getItemsOfCategory(category);\n  }\n\n  getCategories(): Promise<Category[]> {\n    return Promise.resolve(this.authHttp.get(this.url, this.requestBody).toPromise().then(\n      response => {\n\n        let categories: Category[] = [];\n        for (let entry of response.json()) {\n          categories.push(new Category(entry.name));\n        }\n        return categories;\n      }\n    ));\n  }\n\n  getItemsOfCategory(category: Category): Promise<Item[]> {\n    console.log(\"hej \");\n    return Promise.resolve(this.authHttp.get(this.url + \"/\" + category.name, this.requestBody).toPromise().then(\n      response => {\n        console.log(response);\n        var json = response.json().items;\n        let items: Item[] = [];\n        for (let entry of json) {\n          console.log(entry);\n          items.push(new Item(entry.name, entry.rating as number, entry.todo as boolean, category));\n\n        }\n        return items;\n      }\n    ));\n  }\n\n  getItem(name: string): Promise<Item> {\n    return this.getItems()\n      .then(items => items.find(item => item.name === name));\n  }\n\n  getCategory(name: string): Promise<Category> {\n    return this.getCategories()\n      .then(categories => categories.find(category => category.name === name));\n  }\n\n  ngOnInit(): void {\n  }\n}\n"]}